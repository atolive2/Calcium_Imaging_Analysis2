%% Compare 46 to 49 using cleaned data
% start with xcorr_corrected data file
% D:\Torrey_calcium_imaging\compare_46-49\analysis_Feb 2018\corrected_for_badtrials

% most of this is copied from compare_46_49
% This uses the good trial mask generated by eliminating peaks > 5

%% list the col num of all stage 46 and stage 49 tads separately
%this removes the one discobox 46

for t = 1:length(allData)
    key(t) = allData{1,t}.stage;
end

st46 = find(key == 46);
st49 = find(key == 49);
% generate x values for plotting purposes 
st46_X = ones(length(st46),1);
st49_X = 2*ones(length(st49),1);

%% Does the number of responding ROIs differ?

% gather count of respROIs and total ROI count into a matrix
for t = 1:length(allData)
    ct_respROIs(t,1) = length(allData{1,t}.resp_ROIs);
    ct_respROIs(t,2) = size(allData{1,t}.ROIcenters,1);
    ct_respROIs(t,3) = ct_respROIs(t,1) / ct_respROIs(t,2);
end

% scatterplot the values by stage - number of respROIs
figure;
hold on
scatter(st46_X, ct_respROIs(st46,1), 40, 'g', 'filled')
scatter(st49_X, ct_respROIs(st49,1), 40, [0.5 0 0.5], 'filled')
hold off
xlim([0.5 2.5])
ax = gca;
ax.XTick = [1 2]
ax.XTickLabel = [46 49]
title('Number of Responding ROIs by Exp')
xlabel('Stage')
ylabel('ROI count')
saveas(gcf, 'num resROIs by stage', 'png')

% scatterplot the values by stage - proportion of respROIs

figure;
hold on
scatter(st46_X, ct_respROIs(st46,3), 40, 'g', 'filled')
scatter(st49_X, ct_respROIs(st49,3), 40, [0.5 0 0.5], 'filled')
hold off
xlim([0.5 2.5])
ax = gca;
ax.XTick = [1 2];
ax.XTickLabel = [46 49];
title('Proportion of Responding ROIs by Exp')
xlabel('Stage')
ylabel('Proportion of ROIs that respond')
saveas(gcf, 'prop resROIs by stage', 'png')

%% Do 46s differ from 49s on any basic parameter?
% responses, area, peak, MSEnh, unimax_stimtype
% calculate using only good trials. 

%%%%add stim onset time to allData%%%%
% exps 1-9 have onset at 0.5s 
% exps 10+ have onset at 2s
for t = 1:length(allData)
    if allData{1,t}.expnum <=9
        allData{1,t}.stim_onset = 0.5;
    elseif allData{1,t}.expnum >9
        allData{1,t}.stim_onset = 2;
    else
        fprintf('error exp %d, t')
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Find trials included by roi

for t = 1:length(allData)
    allData{1,t}.include = include_bystimtype(allData{1,t}.stimorder, allData{1,t}.trial_mask);
end

for t= 1:length(allData)
    allData{1,t}.stimmask = get_stimmask(allData{1,t}.stimorder)
end

%% Get any individual properties needed:

%onset time
for t = 1:length(allData)
    for r = 1:size(allData{1,t}.df_f0,1) %over each ROI
            for tt = 1:size(allData{1,t}.df_f0,2) %over each trial
                half_peak = allData{1,t}.peak_bytrial2(r, tt) / 2;
                tmp_onset = find((allData{1,t}.df_f0{r, tt} > half_peak) , 3);
                % get trial length (this takes care of exps with not 160 frames)
                trial_length = length(allData{1,t}.df_f0{r, tt});
                %find the proper onset time (e.g. eliminate errors of 1 or 2)
                if length(tmp_onset) < 3 %this sets onset time to 0 for trials with no response
                    onset_time(r, tt) = 0;
                else
                    if tmp_onset(1) == (1 || 2)
                        if tmp_onset(2) == 2 
                            onset_time(r, tt) = tmp_onset(3) / (trial_length/7);
                        else
                            onset_time(r, tt) = tmp_onset(2) / (trial_length/7);
                        end
                    else
                        onset_time(r, tt) = tmp_onset(1) / (trial_length/7);
                    end
                end
            end
    end
    allData{1,t}.onsettime = onset_time;
    clear('onset_time')
end

%% Calculate properties by modality, including only good trials

%avg_test = std_by_stimtypeC(allData{1,t}.peak_bytrial2, allData{1,t}.include)

for t = 1:length(allData)
%     % calculate values by ROI
%     [ allData{1,t}.boolean_response, allData{1,t}.sum_responses ] = get_respondingROIs3( allData{1,t}.area_bytrial, allData{1,t}.peak_bytrial2, allData{1,t}.peak_loc2 );
% 
%     % do things the fast way - including all trials
%     if allData{1,t}.ROI_oktrial_ct(allData{1,t}.resp_ROIs) == length(allData{1,t}.stimorder) % all trials are good
%         allData{1,t}.avg_peak = mean_by_stimtype2(allData{1,t}.peak_bytrial2, allData{1,t}.stimmask);
%         allData{1,t}.avg_area = mean_by_stimtype2(allData{1,t}.area_bytrial, allData{1,t}.stimmask);
%         allData{1,t}.avg_onsettime = mean_by_stimtype2(allData{1,t}.onsettime, allData{1,t}.stimmask);
%         allData{1,t}.std_peak = std_by_stimtype(allData{1,t}.peak_bytrial2, allData{1,t}.stimmask);
%         allData{1,t}.std_area = std_by_stimtype(allData{1,t}.area_bytrial, allData{1,t}.stimmask);
%         allData{1,t}.std_onsettime = std_by_stimtype(allData{1,t}.onsettime, allData{1,t}.stimmask);
%     %otherwise, use include to include only the good trials by ROI
%     else 
%         allData{1,t}.avg_peak = mean_by_stimtypeC(allData{1,t}.peak_bytrial2, allData{1,t}.include);
%         allData{1,t}.avg_area = mean_by_stimtypeC(allData{1,t}.area_bytrial, allData{1,t}.include);
%         allData{1,t}.avg_onsettime = mean_by_stimtypeC(allData{1,t}.onsettime, allData{1,t}.include);
%         allData{1,t}.std_peak = std_by_stimtypeC(allData{1,t}.peak_bytrial2, allData{1,t}.include);
%         allData{1,t}.std_area = std_by_stimtypeC(allData{1,t}.area_bytrial, allData{1,t}.include);
%         allData{1,t}.std_onsettime = std_by_stimtypeC(allData{1,t}.onsettime, allData{1,t}.include);
%         
%         
%     end
%     %calculate datapoints that use average values per ROI
%     allData{1,t}.MSEnh_peak = calc_MSenhancement(allData{1,t}.avg_peak);
%     allData{1,t}.MSEnh_area = calc_MSenhancement(allData{1,t}.avg_area);
%     allData{1,t}.MSEnh_onsettime = calc_MSenhancement(allData{1,t}.avg_onsettime);
    allData{1,t}.MSInd_peak = calc_MSIndex(allData{1,t}.avg_peak);
    allData{1,t}.MSInd_area = calc_MSIndex(allData{1,t}.avg_area);
    allData{1,t}.MSInd_onsettime = calc_MSIndex(allData{1,t}.avg_onsettime);
end



%% Multisensory enhancement and unisensory bias by number of responses

for  t = 1:length(allData)

       for r = 1:size(allData{1,t}.boolean_response, 1)
            multi = sum(allData{1,t}.boolean_response(r, allData{1,t}.include(1,r,:))) / sum(allData{1,t}.include(1,r,:));
            vis = sum(allData{1,t}.boolean_response(r, allData{1,t}.include(2,r,:))) / sum(allData{1,t}.include(2,r,:));
            mech = sum(allData{1,t}.boolean_response(r, allData{1,t}.include(3,r,:))) / sum(allData{1,t}.include(3,r,:));
            if (vis + mech) == 0
                if multi > 0
                    allData{1,t}.MSEnh_numresponses(r) = 1;
                else
                    allData{1,t}.MSEnh_numresponses(r) = 0; 
                end
            else
                allData{1,t}.MSEnh_numresponses(r) = multi / (vis + mech);
            end
            if (vis + mech) == 0 %doesn't respond to either
                allData{1,t}.unibias_numresponses(r) = 0;
            else
                allData{1,t}.unibias_numresponses(r) = vis/(vis+mech);
            end
       end 
end

%% Get unimax and stim type 
% using smoothed data, high/high (2/3) only

for t = 1:length(allData)
        [allData{1,t}.unimax_peakavg, allData{1,t}.unimax_stimtype] = max(allData{1,t}.avg_peak(2:3,:));        
end


%% combine data from responding ROIs from all exps into an array
idx = 1
for t = 1:length(allData)
    for r = 1:length(allData{1,t}.resp_ROIs)
        allRespROIs(idx, 1) = t;
        allRespROIs(idx, 2) = allData{1,t}.resp_ROIs(r);
        %if isfield(allData{1,t}, 'smoothed')
            allRespROIs(idx,3:6) = allData{1,t}.avg_area(1:4,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx,7:10) = allData{1,t}.avg_peak(1:4,allData{1,t}.resp_ROIs(r));
            %allRespROIs(idx,11:14) = allData{1,t}.avg_peakloc(1:4,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx, 11) = allData{1,t}.MSInd_peak(:,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx, 12) = allData{1,t}.MSInd_area(:,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx, 13) = allData{1,t}.MSInd_onsettime(:,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx,15) = allData{1,t}.MSEnh_peak(:,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx,16) = allData{1,t}.unimax_peakavg(:,allData{1,t}.resp_ROIs(r));
            allRespROIs(idx,17) = allData{1,t}.unimax_stimtype(:,allData{1,t}.resp_ROIs(r)); 

        allRespROIs(idx, 18:21) = allData{1,t}.avg_onsettime(1:4, allData{1,t}.resp_ROIs(r));
        allRespROIs(idx, 22:25) = allData{1,t}.std_onsettime(1:4, allData{1,t}.resp_ROIs(r));
        allRespROIs(idx, 26) = allData{1,t}.MSEnh_numresponses(:, allData{1,t}.resp_ROIs(r));
        allRespROIs(idx, 27) = allData{1,t}.unibias_numresponses(:, allData{1,t}.resp_ROIs(r));
        allRespROIs(idx, 28) = allData{1,t}.stage;
        allRespROIs(idx, 29) = allData{1,t}.bathTBX;
        % num responses by stimtype
        % uni bias, onset time, MSEnh_numresponses
        % tad, roi, stage, bathTBX
       idx = idx +1; 
    end
end

[7:9, 11, 13, 18:20, 22:24]
%% Recalculate graphs and stuff...

%% Combining all cells, are there differences by stage in basic params?
st46 = find(allRespROIs(:,28) == 46);
st49 = find(allRespROIs(:,28) == 49);
labels = {'area MS'; 'area V'; 'area M'; 'area NS'; 'peak MS'; 'peak V'; 'peak M'; 'peak NS'; ... 
    'MSIndex peak'; 'MSIndex area'; 'MSIndex onsettime'; 'nothing'; 'MSEnh peak'; 'unimax peak'; 'unimax stimtype'; ... 
    'onset time MS'; 'onset time V'; 'onset time M'; 'onset time NS';...
    'onset time SD MS'; 'onset time SD V'; 'onset time SD M'; 'onset time SD NS'; ...
     'MSEnh num resp'; 'Uni bias num resp'};
 
% make ECDF plots for each var 
for i = 3:27
    s46 = allRespROIs(st46, i);
    s49 = allRespROIs(st49, i);
    figure;
    hold on
    ecdf(s46)

    %set(h, 'Color', 'g')
    ecdf(s49)
    h = get(gca, 'children')
    set(h, 'LineWidth', 3)
    %j = get(gca, 'children')
    %set(j, 'LineWidth', 3)
    %set(j, 'Color', [0.5 0 0.5])
    hold off
    title(sprintf('%s ECDF by stage', labels{i-2}))
    xlabel(labels{i-2})
    ylabel('ROI count')
    fig_filename = sprintf('st 46 vs 49 ECDF of %s', labels{i-2})
    saveas(gcf, fig_filename, 'png')
    close;
end

% are any statistically different? (using kstest2)
for i = 3:27
    s46 = allRespROIs(st46, i);
    s49 = allRespROIs(st49, i);
    allRespROIs_H(i-2) = kstest2(s46, s49);
end
diff_vars = labels(find(allRespROIs_H))
%%%%% sweet, most are different

%% Does PCA differ by stage?
% copied from PCA_loadings
% This is based on Arseny's Elife paper plots
% looking for PCA loadings

% run PCA
% doc: https://www.mathworks.com/help/stats/pca.html

% get subset of allRespROIs data (eliminate area and peak loc)
allRespROIs_PCAsub = allRespROIs(:, [7:10, 15:27]);
labels_PCAsub = labels([5:8, 13:end])
% run PCA on all responding ROIs together
[coeff_all,score_all,latent_all,tsquared_all,explained_all,mu_all] = pca( [allRespROIs_PCAsub(:, :)]);
% run PCA on each stage separately
[coeff_46,score_46,latent_46,tsquared_46,explained_46,mu_46] = pca( [allRespROIs_PCAsub(st46, :)]);
[coeff_49,score_49,latent_49,tsquared_49,explained_49,mu_49] = pca( [allRespROIs_PCAsub(st49, :)]);

% the features (variables) put into allRespROIs(:, 3:27) are stored in labels

% plot coefficients and data onto PC1 x PC2 space
% https://www.mathworks.com/help/stats/biplot.html for documentation
figure;
biplot(coeff_all(:,1:2), 'Scores', score_all(:,1:2), 'VarLabels', labels_PCAsub)
title('PCA loadings all data')
figure;
biplot(coeff_46(:,1:2), 'Scores', score_46(:,1:2), 'VarLabels', labels_PCAsub)
title('PCA Loadings st 46 only')
figure;
biplot(coeff_49(:,1:2), 'Scores', score_49(:,1:2), 'VarLabels', labels_PCAsub)
title('PCA loadings st 49 only')

% plot amount of variance explained by each PC
figure;
bar(explained_all)
title('Variance explained by PC component all data')
xlabel('components')
ylabel('percent')
figure;
bar(explained_46)
title('Variance explained by PC component st46 only')
xlabel('components')
ylabel('percent')
figure;
bar(explained_49)
title('Variance explained by PC component st49 only')
xlabel('components')
ylabel('percent')

% plot MSEnh peak against PC1 value for all cells
figure;
scatter(score_all(:,1), allRespROIs_PCAsub(:,5))
title('MSEnh peak vs PC1 All Data')
xlabel('PC1')
ylabel('MSEnh peak')
saveas(gcf, 'MSEnh peak vs PC1 allRespROIs', 'png')

figure;
scatter(score_46(:,1), allRespROIs_PCAsub(st46,5))
title('MSEnh peak vs PC1 St46 only')
xlabel('PC1')
ylabel('MSEnh peak')
saveas(gcf, 'MSEnh peak vs PC1 st46 only', 'png')

figure;
scatter(score_49(:,1), allRespROIs_PCAsub(st49, 5))
title('MSEnh peak vs PC1 St49 only')
xlabel('PC1')
ylabel('MSEnh peak')
saveas(gcf, 'MSEnh peak vs PC1 st49 only', 'png')


